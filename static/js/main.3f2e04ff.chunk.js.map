{"version":3,"sources":["ParamsExample.js","App.js","serviceWorker.js","index.js"],"names":["addresses","titles","Child","_ref","location","name","address","params","queryString","parse","search","console","log","order","react_default","a","createElement","ParamsExample","HashRouter","basename","Link","to","pathname","Route","path","render","props","App","className","src_ParamsExample","Component","Boolean","window","hostname","match","ReactDOM","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"ySAIMA,EAAY,CAAC,qBAAO,qBAAO,qBAAO,4BAClCC,EAAS,CAAC,2BAAQ,2BAAQ,2BAAQ,4BAoBxC,SAASC,EAATC,GAA6B,IAAZC,EAAYD,EAAZC,SACZC,EAAO,GACPC,EAAU,GAEd,GAAGF,EAAS,CACX,IAAIG,EAASC,IAAYC,MAAML,EAASM,QACxCC,QAAQC,IAAIL,GACZF,EAAOE,EAAOF,KACd,IAAIQ,GAASN,EAAOM,MAAM,EAC1BP,EAAUN,EAAUa,GACpBR,EAAOJ,EAAOY,GAGf,OACCC,EAAAC,EAAAC,cAAA,WACEX,EAASS,EAAAC,EAAAC,cAAA,sCAAUX,EAAV,SAAiBC,EAAjB,KAAqCQ,EAAAC,EAAAC,cAAA,mDAKnCC,MAtCf,WACC,OACCH,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAQC,SAAU,YACjBL,EAAAC,EAAAC,cAAA,WACCF,EAAAC,EAAAC,cAAA,gFACAF,EAAAC,EAAAC,cAAA,UACCF,EAAAC,EAAAC,cAAA,cAAKF,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAAMC,GAAI,CAAEC,SAAU,eAAgBZ,OAAQ,aAA9C,8BAAL,KACAI,EAAAC,EAAAC,cAAA,cAAKF,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAAMC,GAAI,CAAEC,SAAU,eAAgBZ,OAAQ,aAA9C,8BAAL,KACAI,EAAAC,EAAAC,cAAA,cAAKF,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAAMC,GAAI,CAAEC,SAAU,eAAgBZ,OAAQ,aAA9C,8BAAL,KACAI,EAAAC,EAAAC,cAAA,cAAKF,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAAMC,GAAI,CAAEC,SAAU,eAAgBZ,OAAQ,aAA9C,8BAAL,MAGDI,EAAAC,EAAAC,cAACO,EAAA,EAAD,CAAOC,KAAK,eAAeC,OAAQ,SAACC,GAA8B,OAApBf,QAAQC,IAAIc,GAAgBZ,EAAAC,EAAAC,cAACd,EAAUwB,SCL1EC,0LARX,OACEb,EAAAC,EAAAC,cAAA,OAAKY,UAAU,OACjBd,EAAAC,EAAAC,cAACa,EAAD,cAJcC,cCQEC,QACW,cAA7BC,OAAO5B,SAAS6B,UAEe,UAA7BD,OAAO5B,SAAS6B,UAEhBD,OAAO5B,SAAS6B,SAASC,MACvB,2DCZNC,IAASV,OAAOX,EAAAC,EAAAC,cAACoB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.3f2e04ff.chunk.js","sourcesContent":["import React from \"react\";\nimport { HashRouter as Router, Link, Route } from \"react-router-dom\";\nimport queryString from \"query-string\";\n\nconst addresses = [\"江西省\", \"临江府\", \"大有乡\", \"庙背李家\"];\nconst titles = [\"所在省份\", \"所在县市\", \"所在乡镇\", \"所在村组\"];\n\nfunction ParamsExample() {\n\treturn (\n\t\t<Router basename={'/reactjs'}>\n\t\t\t<div>\n\t\t\t\t<h2>参数传递实例，您想查询</h2>\n\t\t\t\t<ul>\n\t\t\t\t\t<li> <Link to={{ pathname: \"/homeaddress\", search: \"?order=1\" }}> 所在省份 </Link> </li>\n\t\t\t\t\t<li> <Link to={{ pathname: \"/homeaddress\", search: \"?order=2\" }}> 所在县市 </Link> </li>\n\t\t\t\t\t<li> <Link to={{ pathname: \"/homeaddress\", search: \"?order=3\" }}> 所在乡镇 </Link> </li>\n\t\t\t\t\t<li> <Link to={{ pathname: \"/homeaddress\", search: \"?order=4\" }}> 所在村组 </Link> </li>\n\t\t\t\t</ul>\n\n\t\t\t\t<Route path=\"/homeaddress\" render={(props) =>{console.log(props); return (<Child {...props}/>)}} />\n\t\t\t</div>\n\t\t</Router>\n\t);\n}\n\nfunction Child({ location }) {\n\tlet name = \"\";\n\tlet address = \"\";\n\n\tif(location){\n\t\tlet params = queryString.parse(location.search);\n\t\tconsole.log(params);\n\t\tname = params.name;\n\t\tlet order = +params.order-1;\n\t\taddress = addresses[order];\n\t\tname = titles[order];;\n\t}\n\n\treturn (\n\t\t<div>\n\t\t\t{name ? ( <h3> 阁下府上{name}为{address} </h3>) : ( <h3>阁下住址不明</h3>)}\n\t\t</div>\n\t);\n}\n\nexport default ParamsExample;\n\n","import React, { Component } from 'react';\nimport ParamsExample from './ParamsExample';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n\t  \t<ParamsExample />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}